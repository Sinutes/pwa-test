{"version":3,"sources":["logo.svg","components/Counter.js","components/InstallPWA.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Counter","props","_useState","useState","_useState2","Object","slicedToArray","count","setCount","react_default","a","createElement","style","textAlign","marginTop","Button","variant","onClick","InstallPWA","supportsPWA","setSupportsPWA","_useState3","_useState4","promptInstall","setPromptInstall","useEffect","handler","e","preventDefault","console","log","window","addEventListener","removeEventListener","className","id","aria-label","title","evt","prompt","App","src","logo","alt","components_Counter","components_InstallPWA","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App","URL","process","href","origin","concat","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d15d7706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst Counter = (props) => {\r\n    let [count, setCount] = useState(0)\r\n\r\n    function increment() {\r\n        setCount(count + 1);\r\n    }\r\n\r\n    function decrement() {\r\n        setCount(count - 1);\r\n    }\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', marginTop: \"-30px\" }}>\r\n            <div>\r\n                <h3>Test PWA</h3>\r\n\r\n                <Button variant=\"contained\" onClick={increment}>+</Button>\r\n                <span> {count} </span>\r\n                <Button variant=\"contained\" onClick={decrement}>-</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst InstallPWA = () => {\r\n    const [supportsPWA, setSupportsPWA] = useState(false);\r\n    const [promptInstall, setPromptInstall] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const handler = e => {\r\n            e.preventDefault();\r\n            console.log(\"we are being triggered :D\");\r\n            setSupportsPWA(true);\r\n            setPromptInstall(e);\r\n        };\r\n        window.addEventListener(\"beforeinstallprompt\", handler);\r\n\r\n        return () => window.removeEventListener(\"transitionend\", handler);\r\n    }, []);\r\n\r\n    const onClick = evt => {\r\n        evt.preventDefault();\r\n        if (!promptInstall) {\r\n            return;\r\n        }\r\n        promptInstall.prompt();\r\n    };\r\n    if (!supportsPWA) {\r\n        return null;\r\n    }\r\n    return (\r\n        <button\r\n            className=\"link-button\"\r\n            id=\"setup_button\"\r\n            aria-label=\"Install app\"\r\n            title=\"Install app\"\r\n            onClick={onClick}\r\n        >\r\n            Install\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default InstallPWA;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from './components/Counter';\nimport InstallPWA from './components/InstallPWA';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <Counter />\n\n        <InstallPWA />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}